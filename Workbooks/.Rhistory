ifelse(num %% 2 == 0, num/2, 3*num+1)
num<-1
ifelse(num %% 2 == 0, num/2, 3*num+1)
num %% 2
ifelse(num/2 == 0, num/2, 3*num+1)
for (num==EVEN) do {num/2} else {3*num+1}
num==EVEN
for (num==ODD) do {3*num+1} OR for (num==EVEN) do {num/2}
listOfWords<-c("first","second", "third")
listOfWords<-c("first","second", "third", "fourth", "fifth")
for (i in c(5, 4, 3, 2, 1)) {print(listOfWords[i])}
print(transpose&&listOfWords[All])
transpose(listOfWords)
lapply(print, reverse$listOfWords)
reverse(listOfWords)
lapply(print, listOfWords)
lapply(listOfWords, print)
lapply(listOfWords, print)
for (i in c(5, 4, 3, 2, 1)) {print(listOfWords[i])}
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
#Work through the following tutorial. Copy and run the code necessary to complete
#the tutorial into this notebook. Note that some of the code they provide you
#has some intentional blank spaces. It will be up to you to fill them in.
#Their tutorial also suggests some other code to run and other things you can
#do with the data. Try them out. The more you practice the better you will be
#at coding in in R.
#https://www.datacamp.com/community/tutorials/machine-learning-in-r
#
# Read in `iris` data
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"),
header = FALSE)
# Print first lines
head(iris)
# Add column names
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
# Check the result
iris
install.packages("ggvis")
library(ggvis)
# Iris scatter plot
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
# Overall correlation `Petal.Length` and `Petal.Width`
cor(iris$Petal.Length, iris$Petal.Width)
# Return values of `iris` levels
x=levels(iris$Species)
x=union(iris$Species, iris$Species)
x
# Print Setosa correlation matrix
print(x[1])
cor(iris[iris$Species==x[1],1:4])
# Print Versicolor correlation matrix
print(x[2])
cor(iris[iris$Species==x[2],1:4])
# Print Virginica correlation matrix
print(x[3])
cor(iris[iris$Species==x[3],1:4])
# Division of `Species`
table(iris$Species)
# Percentual division of `Species`
round(prop.table(table(iris$Species)) * 100, digits = 1)
# Summary overview of `iris`
summary(iris)
# Refined summary overview
summary(iris[c("Petal.Width", "Sepal.Width")])
library(class)
# Build your own `normalize()` function
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
# Normalize the `iris` data
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
iris_norm
# Summarize `iris_norm`
summary(iris_norm)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind
ind==1
# Compose training set
iris.training <- iris_norm[ind==1, 1:4]
# Inspect training set
head(iris.training)
# Compose test set
iris.test <- iris_norm[ind==2, 1:4]
# Inspect test set
head(iris.test)
# Compose `iris` training labels
iris.trainLabels <- iris[ind==1,5]
# Inspect result
print(iris.trainLabels)
# Compose `iris` test labels
iris.testLabels <- iris[ind==2, 5]
# Inspect result
print(iris.testLabels)
# Build the model
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
# Inspect `iris_pred`
head(iris_pred)
# Put `iris.testLabels` in a data frame
irisTestLabels <- data.frame(iris.testLabels)
# Merge `iris_pred` and `iris.testLabels`
merge <- data.frame(iris_pred, iris.testLabels)
# Specify column names for `merge`
names(.....) <- c("Predicted Species", "Observed Species")
# Inspect `merge`
merge
# Build the model
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
# Inspect `iris_pred`
head(iris_pred)
# Put `iris.testLabels` in a data frame
irisTestLabels <- data.frame(iris.testLabels)
# Merge `iris_pred` and `iris.testLabels`
merge <- data.frame(iris_pred, iris.testLabels)
merge
# Specify column names for `merge`
names(merge) <- c("Predicted Species", "Observed Species")
# Inspect `merge`
merge
install.packages("gmodels")
library("gmodels")
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
library("gmodels")
install.packages("gModels")
y
install.packages("gmodels")
library(gmodels)
install.packages("gdata")
library(gmodels)
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
