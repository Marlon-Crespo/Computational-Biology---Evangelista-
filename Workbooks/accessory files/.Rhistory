randomizedLinearModel<-lm(N~years, data=randomizedData) #estimates the linear model for the randomized data
randomizedData<-cbind(lynxData[1],sample(lynxData[,2], 10, replace=FALSE) )#takes the data and removes the relationship between x and y by randomizing the population sizes in a year
randomizedLinearModel<-lm(N~years, data=randomizedData) #estimates the linear model for the randomized data
colnames(randomizedData)<- c("years","N") #set the factor names
randomizedLinearModel<-lm(N~years, data=randomizedData) #estimates the linear model for the randomized data
{randomizedData<-cbind(lynxData[1],sample(lynxData[,2], 10, replace=FALSE) )#takes the data and removes the relationship between x and y by randomizing the population sizes in a year
colnames(randomizedData)<- c("years","N") #set the factor names
}
{randomizedData<-cbind(lynxData[1],sample(lynxData[,2], 10, replace=FALSE) )
colnames(randomizedData)<- c("years","N")}#takes the data and removes the relationship between x and y by randomizing the population sizes in a year
randomizedLinearModel<-lm(N~years, data=randomizedData) #estimates the linear model for the randomized data
{plot(lynxData)
abline(randomizedLinearModel,0,lwd=2,col="red")} #plot(lynxData , pch = c(1, 8))
predict(randomizedLinearModel,lynxData) - lynxData$N
plot(predict(randomizedLinearModel,lynxData) - lynxData$N)
{plot(c(lynxLinearModel$residuals, randDiff) , pch = c(1, 8))
abline(randomizedLinearModel,0,lwd=2,col="red")} #
{plot(c(lynxLinearModel$residuals, randDiff) , pch = c(1, 8))
abline(0,0,lwd=2,col="red")} #
mean(lynxLinearModel$residuals)
mean(randDiff)
mean(lynxLinearModel$residuals)
mean(randDiff)
c(mean(lynxLinearModel$residuals), mean(randDiff) )
{randomizedData<-cbind(lynxData[1],sample(lynxData[,2], 10, replace=FALSE) )
colnames(randomizedData)<- c("years","N")}#takes the data and removes the relationship between x and y by randomizing the population sizes in a year
randomizedLinearModel<-lm(N~years, data=randomizedData) #estimates the linear model for the randomized data
randDiff<-plot(predict(randomizedLinearModel,lynxData) - lynxData$N)
randDiff<-predict(randomizedLinearModel,lynxData) - lynxData$N
{plot(c(lynxLinearModel$residuals, randDiff) , pch = c(1, 8))
abline(0,0,lwd=2,col="red")} #
{plot(c(lynxLinearModel$residuals, randDiff) , pch = c(1, 8))
abline(0,0,lwd=2,col="red")} #
c(mean(lynxLinearModel$residuals), mean(randDiff) )
{plot(lynxLinearModel$residuals , pch = c(1, 8))
abline(0,0,lwd=2,col="red")}
{plot(lynxLinearModel$residuals)
abline(0,0,lwd=2,col="red")}
{randomizedData<-cbind(lynxData[1],sample(lynxData[,2], 10, replace=FALSE) )
colnames(randomizedData)<- c("years","N")}#takes the data and removes the relationship between x and y by randomizing the population sizes in a year
randomizedLinearModel<-lm(N~years, data=randomizedData) #estimates the linear model for the randomized data
randDiff<-predict(randomizedLinearModel,lynxData) - lynxData$N
{plot(randDiff)
abline(0,0,lwd=2,col="red")} #
{plot(c(randDiff,lynxLinearModel$residuals))
abline(0,0,lwd=2,col="red")}
{plot(c(randDiff,lynxLinearModel$residuals), rch=c(1, 8))
abline(0,0,lwd=2,col="red")}
{plot(c(randDiff,lynxLinearModel$residuals), pch=c(1, 8))
abline(0,0,lwd=2,col="red")}
{plot(lynxLinearModel$residuals,c(randDiff), pch=c(1, 8))
abline(0,0,lwd=2,col="red")}
{plot(c(lynxLinearModel$residuals,randDiff), pch=c(1, 8))
abline(0,0,lwd=2,col="red")}
c(lynxLinearModel$residuals,randDiff)
rbind(lynxLinearModel$residuals,randDiff)
{plot(rbind(lynxLinearModel$residuals,randDiff), pch=c(1, 8))
abline(0,0,lwd=2,col="red")}
{plot(cbind(lynxLinearModel$residuals,randDiff), pch=c(1, 8))
abline(0,0,lwd=2,col="red")}
lynxLinearModel$residuals,randDiff
c(lynxLinearModel$residuals,randDiff)
c(rep(1, 10)), rep(8, 10))
c(rep(1, 10), rep(8, 10))
{plot(cbind(lynxLinearModel$residuals,randDiff), pch=c(rep(1, 10), rep(8, 10)))
abline(0,0,lwd=2,col="red")}
{plot(c(lynxLinearModel$residuals,randDiff), pch=c(rep(1, 10), rep(8, 10)))
abline(0,0,lwd=2,col="red")}
{plot(rbind(lynxLinearModel$residuals,randDiff), pch=c(rep(1, 10), rep(8, 10)))
abline(0,0,lwd=2,col="red")}
{plot(c(lynxLinearModel$residuals,randDiff), pch=c(rep(1, 10), rep(8, 10)))
abline(0,0,lwd=2,col="red")}
lynx
predict(lynxLinearModel, lynxData<-data.frame(cbind(years,lynx[10:100])) )
predict(lynxLinearModel, lynxData<-data.frame(cbind(10:100,lynx[10:100])) )
predict(lynxLinearModel, lynxData<-data.frame(cbind(11:20,lynx[11:20])) )
11:20
predict(lynxLinearModel, lynxData<-data.frame(cbind(11:20,lynx[11:20])) )
extrapolatedPops<-predict(lynxLinearModel, lynxData<-data.frame(cbind(11:20,lynx[11:20])) )
extrapolatedPops<-predict(lynxLinearModel, data.frame(cbind(11:20,lynx[11:20])) )
extrapolatedPops
extrapolatedPops[,2]
extrapolatedPops[,1]
extrapolatedPops[1]
extrapolatedPops
str(extrapolatedPops)
as.list(extrapolatedPops)
delist(extrapolatedPops)
unlist(extrapolatedPops)
unlist(as.list(extrapolatedPops))
lynxData<-data.frame(cbind(years,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
n<-10
years<-c(1:n)
lynxData<-data.frame(cbind(years,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
colnames(lynxData)<- c("years","N") #set the factor names
lynxData
lynxLinearModel<-lm(N~years, data=lynxData) #estimates the linear model
{plot(lynxData)
abline(lynxLinearModel,0,lwd=2,col="red")}
plot(extrapolatedPops, lynxData[,2])
lynxData[,2]
extrapolatedPops
summary[extrapolatedPops]
summary(extrapolatedPops)
head(extrapolatedPops)
str(extrapolatedPops)
c(extrapolatedPops)
unlist(c(extrapolatedPops))
data.frame(extrapolatedPops))
data.frame(extrapolatedPops)
data.frame(extrapolatedPops)[,1]
extrapolatedPops<-data.frame(predict(lynxLinearModel, data.frame(cbind(11:20,lynx[11:20])) ))[,1]
plot(extrapolatedPops, lynxData[,2])
plot(lynxData[,2], lynxData[,2])
extrapolatedPops<-data.frame(predict(lynxLinearModel, data.frame(cbind(21:30,lynx[21:40])) ))[,1]
plot(extrapolatedPops, lynxData[,2])
plot(lynxData[,2], lynxData[,2])
{plot(extrapolatedPops, lynxData[,2])
abline(x,0,lwd=2,col="red")}
{plot(extrapolatedPops, lynxData[,2])
abline(x,0,lwd=2,col="red")}
{plot(extrapolatedPops, lynxData[,2])
abline(0,1,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
extrapolatedPops<-data.frame(predict(lynxLinearModel, data.frame(cbind(25:34,lynx[25:34])) ))[,1]
{plot(extrapolatedPops, lynxData[,2])
abline(0,1,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
{plot(lynxData[,2],extrapolatedPops)
abline(0,1,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
{yearStart=55
yearEnd=yearStart+9}
{yearStart=55
yearEnd=yearStart+9}
lynx[yearStart:yearEnd]
{yearStart=55
yearEnd=yearStart+9}
extrapolatedPops<-data.frame(predict(lynxLinearModel, data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd])) ))[,1] #finds the fitted values for years 25-34 on the model
{yearStart=55
yearEnd=yearStart+9
extrapolatedPops<-data.frame(predict(lynxLinearModel, data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd])) ))[,1]} #finds the fitted values for the specified 10 year period
{plot(lynxData[,2],extrapolatedPops)
abline(0,1,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
{yearStart=30
yearEnd=yearStart+9
extrapolatedPops<-data.frame(predict(lynxLinearModel, data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd])) ))[,1]} #finds the fitted values for the specified 10 year period
{plot(lynxData[,2],extrapolatedPops)
abline(0,1,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
plot(lynxData[,2], lynxLinearModel$fitted.values)
extraData<-data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd])) ))[,1] #new dataset for the specified 10 year period
{yearStart=30
yearEnd=yearStart+9
extraData<-data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd])) ))[,1]} #new dataset for the specified 10 year period
lynxLinearModel$coefficients
coef(lynxLinearModel)
coef(lynxLinearModel)[2]
coef(lynxLinearModel)[[2]]
lynxLMeq<-function(x) coef(lynxLinearModel)[[2]]*x+coef(lynxLinearModel)[[1]]
lynxLMeq(1)
lynxLMeq(0)
lynxLMeq(10)
lynxData
plot(lynxData[,2], lynxLinearModel$fitted.values)
plot(lynxData)
abline(lynxLinearModel,lwd=2,col="red")}
{plot(lynxData)
abline(lynxLinearModel,lwd=2,col="red")}
lynxLMeq(6)
lynxData
lynxLMeq(lynxData)
{plot(1:10)
abline(lynxLinearModel,lwd=2,col="red")}
lynxLMeq(1:10)
lynxLMeq(yearStart:yearEnd)
extraData[,2]
extraData<-data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd])) ))[,1]} #new dataset for the specified 10 year period
extraData[,2]
{yearStart=30
yearEnd=yearStart+9
extraData<-data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd])) ))[,1]} #new dataset for the specified 10 year period
extraData[,2]
{yearStart=30
yearEnd=yearStart+9
extraData<-data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd])) ))[,1]} #new dataset for the specified 10 year period
{yearStart=30
yearEnd=yearStart+9
extraData<-data.frame(cbind(yearStart:yearEnd,lynx[yearStart:yearEnd]))[,1]} #new dataset for the specified 10 year period
extraData[,2]
extraData
lynx[yearStart:yearEnd] #new dataset for the specified 10 year period
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(0,1,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(lynxLMeq,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(lynxLinearModel,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(0,1,lwd=2,col="red")}##Makes line with intercept 0 and slope = 1
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(0,1,lwd=2,col="red")}##Makes line with intercept = 0 and slope = 1
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(0,10,lwd=2,col="red")}##Makes line with intercept = 0 and slope = 1
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(0,100,lwd=2,col="red")}##Makes line with intercept = 0 and slope = 1
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(0,1,lwd=2,col="red")}##Makes line with intercept = 0 and slope = 1
{plot(lynx[yearStart:yearEnd]0,lynx[yearStart:yearEnd])
{plot(lynx[yearStart:yearEnd],lynx[yearStart:yearEnd])
abline(0,1,lwd=2,col="red")}##Makes line with intercept = 0 and slope = 1
{yearStart=11
yearEnd=yearStart+9}
#Turn the linear model object into an equation with pluggable values
lynxLMeq<-function(x) coef(lynxLinearModel)[[2]]*x+coef(lynxLinearModel)[[1]]
{plot(lynxLMeq(yearStart:yearEnd),lynx[yearStart:yearEnd])
abline(0,1,lwd=2,col="red")}##Makes line with intercept = 0 and slope = 1
{plot(lynx[yearStart:yearEnd],lynx[yearStart:yearEnd])
abline(0,1,lwd=2,col="red")}##Makes line with intercept = 0 and slope = 1
{plot(lynx[1:20])
abline(lynxLinearModel,0,lwd=2,col="red")}
n<-20
years<-c(1:n)
lynxData<-data.frame(cbind(years,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
colnames(lynxData)<- c("years","N") #set the factor names
lynxData
lynxLinearModel<-lm(N~years, data=lynxData) #estimates the linear model
{plot(lynxData)
abline(lynxLinearModel,0,lwd=2,col="red")}
n<-30
moreYears<-c(1:n)
n<-30
moreYears<-c(1:n)
newLynxData<-data.frame(cbind(moreYears,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
colnames(newLynxData)<- c("years","N") #set the factor names
polynomialFit <- lm(N ~ poly(years, degree=3), lynx)
polynomialFit <- lm(N ~ poly(years, degree=3), newLynxData)
polynomialFit
{plot(newLynxData)
abline(polynomialFit,0,lwd=2,col="red")}
abline(polynomialFit,lwd=2,col="red")}
{plot(newLynxData)
abline(polynomialFit,lwd=2,col="red")}
n<-30
moreYears<-c(1:n)
newLynxData<-data.frame(cbind(moreYears,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
colnames(newLynxData)<- c("years","N") #set the factor names
polynomialFit <- lm(N ~ poly(years, degree=10), newLynxData)
{plot(newLynxData)
abline(polynomialFit,lwd=2,col="red")}
{plot(newLynxData)
lines(polynomialFit,lwd=2,col="red")}
{plot(newLynxData)
lines(polynomialFit,lwd=2,col="red")}
polynomialFit <- lm(N ~ poly(years, degree=9), newLynxData)
{plot(newLynxData)
lines(polynomialFit,lwd=2,col="red")}
lines(polynomialFit,lwd=2,col="red")}
{plot(newLynxData)
lines(polynomialFit,lwd=2,col="red")}
{plot(newLynxData)
abline(polynomialFit,lwd=2,col="red")}
{plot(polynomialFit)
abline(polynomialFit,lwd=2,col="red")}
polynomialFit <- lm(N ~ poly(years, degree=3), newLynxData)
{plot(polynomialFit)
abline(polynomialFit,lwd=2,col="red")}
{plot(newLynxData)
abline(polynomialFit,lwd=2,col="red")}
polynomialFit
lynxPMeq<-function(x) coef(polynomialFit)[[2]]*x^3+coef(polynomialFit)[[3]]*x^2+coef(polynomialFit)[[4]]*x+coef(polynomialFit)[[1]]
{plot(lynxPMeq)
abline(polynomialFit,lwd=2,col="red")}
{plot(newLynxData)
abline(lynxPMeq,lwd=2,col="red")}
{plot(newLynxData)
abline(lynxPMeq,lwd=2,col="red")}
lynxPMeq<-function(x) coef(polynomialFit)[[2]]*x^3+coef(polynomialFit)[[3]]*x^2+coef(polynomialFit)[[4]]*x+coef(polynomialFit)[[1]]
{plot(newLynxData)
abline(lynxPMeq,lwd=2,col="red")}
plot(newLynxData)
plot(lynxPMeq,lwd=2,col="red")
plot(lynxPMeq(newLynxData),lwd=2,col="red")
newLynxData
newLynxData[,1]
plot(lynxPMeq(newLynxData[,1]),lwd=2,col="red")
plot(newLynxData[,1],lynxPMeq(newLynxData[,1]),lwd=2,col="red")
lynxPMeq(newLynxData[,1])
n<-20
moreYears<-c(1:n)
newLynxData<-data.frame(cbind(moreYears,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
colnames(newLynxData)<- c("years","N") #set the factor names
polynomialFit <- lm(N ~ poly(years, degree=3), newLynxData)
polynomialFit
lynxPMeq<-function(x) coef(polynomialFit)[[2]]*x^3+coef(polynomialFit)[[3]]*x^2+coef(polynomialFit)[[4]]*x+coef(polynomialFit)[[1]]
plot(newLynxData)
plot(newLynxData[,1],lynxPMeq(newLynxData[,1]),lwd=2,col="red")
plot(8polynomialFit&fitted.values())
plot(8polynomialFit&fitted.values
plot(polynomialFit&fitted.values
plot(polynomialFit&fitted.values)
plot(polynomialFit$fitted.values)
plot(polynomialFit$fitted.values, type = "b")
plot(polynomialFit$fitted.values, type = "a")
plot(polynomialFit$fitted.values, type = "c")
plot(polynomialFit$fitted.values, type = "d")
plot(polynomialFit$fitted.values, type = "c")
points(newLynxData[,1],lwd=2,col="red")
{plot(polynomialFit$fitted.values, type = "c")
points(newLynxData[,1],lwd=2,col="red")}
points(newLynxData,lwd=2,col="red")}
{plot(polynomialFit$fitted.values, type = "c")
points(newLynxData,lwd=2,col="red")}
n<-30
moreYears<-c(1:n)
newLynxData<-data.frame(cbind(moreYears,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
colnames(newLynxData)<- c("years","N") #set the factor names
polynomialFit <- lm(N ~ poly(years, degree=3), newLynxData)
polynomialFit
lynxPMeq<-function(x) coef(polynomialFit)[[2]]*x^3+coef(polynomialFit)[[3]]*x^2+coef(polynomialFit)[[4]]*x+coef(polynomialFit)[[1]]
{plot(polynomialFit$fitted.values, type = "c")
points(newLynxData,lwd=2,col="red")}
lynxPMeq(newLynxData[,1])
points(newLynxData,lwd=2)}
{plot(polynomialFit$fitted.values, type = "c",col="red")
points(newLynxData,lwd=2)}
n<-15
moreYears<-c(1:n)
newLynxData<-data.frame(cbind(moreYears,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
colnames(newLynxData)<- c("years","N") #set the factor names
polynomialFit <- lm(N ~ poly(years, degree=3), newLynxData)
polynomialFit
lynxPMeq<-function(x) coef(polynomialFit)[[2]]*x^3+coef(polynomialFit)[[3]]*x^2+coef(polynomialFit)[[4]]*x+coef(polynomialFit)[[1]]
{plot(polynomialFit$fitted.values, type = "c",col="red")
points(newLynxData,lwd=2)}
lynxPMeq(newLynxData[,1])
n<-15
years<-c(1:n)
lynxData<-data.frame(cbind(years,lynx[1:n])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
colnames(lynxData)<- c("years","N") #set the factor names
lynxData
lynxLinearModel<-lm(N~years, data=lynxData) #estimates the linear model
{plot(lynxData)
abline(lynxLinearModel,0,lwd=2,col="red")}
#plot them together
{plot(polynomialFit$fitted.values, type = "c",col="red")
points(data.frame(cbind(moreYears,lynx[1:50])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
,lwd=2)}
#plot them together
{plot(polynomialFit$fitted.values, type = "c",col="red")
points(data.frame(cbind(1:50,lynx[1:50])) #cbind takes the two lists and makes them separate columns of the same list/dataframe
,lwd=2)}
#plot them together
{plot(polynomialFit$fitted.values, type = "c",col="red", xlim=c(0,50))
points(data.frame(cbind(1:50,lynx[1:50]))
,lwd=2)}
install.packes(phylosim)
install.packages(phylosim)
install.packages("phylosim")
library(ape)
(ape)
library(ape)
library(ape)
library("seqinr")
library(ape)
library(seqinr)
install.packages("seqinr")
seqs<-setwd("G:\\Other computers\\My Laptop\\Dropbox\\Teaching\\Computational biology\\workbooks\\accessory files")
seqs
setwd("G:\\Other computers\\My Laptop\\Dropbox\\Teaching\\Computational biology\\workbooks\\accessory files")
read.seqs(myAlignment.fas)
read.fasta(myAlignment.fas)
read.FASTA(myAlignment.fas)
read.FASTA("myAlignment.fas")
seqs<-read.FASTA("myAlignment.fas")
seqs<-read.FASTA("myAlignment.fas")[1:3]
seqs<-read.FASTA("myAlignment.fas")[1:3]
seqs
{seqs<-read.FASTA("myAlignment.fas")[1:3]
seqs}
{seqs<-read.FASTA("myAlignment.fas")[1:3]
seqs}
{
setwd("G:\\Other computers\\My Laptop\\Dropbox\\Teaching\\Computational biology\\workbooks\\accessory files")
seqs<-read.FASTA("myAlignment.fas")[1:3]
seqs}
library(ape)
library(seqinr)
library(DECIPHER)
library(ape)
library(seqinr)
library(DECIPHER)
library(DECIPHER)
install.packages("DECIPHER")
install.packages("seqaln")
library(ape)
library(seqinr)
library(msa )
install.packages("msa")
library(ape)
library(seqinr)
library(muscle )
install.packages("muscle")
setwd("G:\\Other computers\\My Laptop\\Dropbox\\Teaching\\Computational biology\\workbooks\\accessory files")
{
###Note: change the directory below to match the location of the file on your system
seqs<-read.FASTA("G:\\Other computers\\My Laptop\\Dropbox\\Teaching\\Computational biology\\workbooks\\accessory files\\myAlignment.fas")[1:3]
seqs}
image.DNAbin(seqs)
{
###Note: change the directory below to match the location of the file on your system
seqs<-read.FASTA("G:\\Other computers\\My Laptop\\Dropbox\\Teaching\\Computational biology\\workbooks\\accessory files\\myAlignment.fas")[1:4]
image.DNAbin(seqs)
}
###Note: change the directory below to match the location of the file on your system
trans(seqs)
###Note: change the directory below to match the location of the file on your system
trans(seqs)
image.AAbin(seqs)
image.AAbin(aaSeqs)
{
aaSeqs<-trans(seqs) #assumes codon structure and translates nucleotides to codons
image.AAbin(aaSeqs)
}
{aaSeqs<-trans(seqs)
image.AAbin(aaSeqs)}
{aaSeqs<-trans(seqs)
image.AAbin(as.AAbin(aaSeqs))}#assumes codon structure and translates nucleotides to codons before visualizing
{aaSeqs<-trans(seqs)
image.AAbin(aaSeqs)}#assumes codon structure and translates nucleotides to codons before visualizing
```{r}
```{r}
aaSeqs<-trans(seqs)
aaSeqs
image.AAbin(aaSeqs)#assumes codon structure and translates nucleotides to codons before visualizing
print(aaSeqs)#assumes codon structure and translates nucleotides to codons before visualizing
image(aaSeqs)#assumes codon structure and translates nucleotides to codons before visualizing
seg.sites(seqs)
AAsubst(seqs)
seqs[[1]]
seqs[1]
seqs[,21:33]
seqs[1,4]
seqs[1,3]
seqs[[,21:33]]
seqs[[21:33]]
seqs[[1:4]]
seqs[[1]]
seqs[1]
seqs[1][1]
seqs[1][2]
seqs[1][[2]]
seqs[1,]
seqs[[1]]
seqs[[1]][[21:33]]
seqs[[1]][21:33]
seqs[[1:4]][21:33]
beginningSegment<-c()
for (pos in 1:4){
seqs[[pos]][21:33]
}
beginningSegment<-c()
for (pos in 1:4){
beginningSegment[[pos]]<-seqs[[pos]][21:33]
}
as.DNAbin(beginningSegment)
beginningSegment
as.character(seqs)
beginningSegment<-c()
for (pos in 1:4){
beginningSegment[[pos]]<-as.character(seqs)[[pos]][21:33]
}
beginningSegment
for (pos in 1:4){
beginningSegment[[pos]]<-as.character(seqs)[[pos]][33:45]
}
beginningSegment
for (pos in 1:4){
beginningSegment[[pos]]<-as.character(seqs)[[pos]][36:48]
}
beginningSegment
as.alignment(beginningSegment)
unlist(beginningSegment, recursive = FALSE)
unlist(lapply(beginningSegment, as.DNAbin), recursive = FALSE)
lapply(beginningSegment, as.DNAbin)
rbind(lapply(beginningSegment, as.DNAbin))
unlist(rbind(lapply(beginningSegment, as.DNAbin)))
unlist(rbind(lapply(beginningSegment, as.DNAbin)), recursive = FALSE)
beginningSegment<-as.DNAbin(c())
beginningSegment<-seqs
for (pos in 1:4){
beginningSegment[[pos]]<-as.character(seqs)[[pos]][36:48]
}
beginningSegment
for (pos in 1:4){
beginningSegment[[pos]]<-seqs[[pos]][36:48]
}
beginningSegment
for (pos in 1:4){
beginningSegment[[pos]]<-seqs[[pos]][36:50]
}
beginningSegment
image.DNAbin(beginningSegment)
for (pos in 1:4){
beginningSegment[[pos]]<-seqs[[pos]][35:49]
}
image.DNAbin(beginningSegment)
image.DNAbin(beginningSegment, show.bases = TRUE)
JC69 <- c(freq,freq,freq,freq)
JC69
JC69 <- c(freq,freq,freq,freq)
freq<-0.25 #in this example we will set the exchange frequency to 0.25
JC69 <- c(freq,freq,freq,freq)
JC69
JC69 <- c("a"->"a" = freq,freq,freq,freq)
JC69
